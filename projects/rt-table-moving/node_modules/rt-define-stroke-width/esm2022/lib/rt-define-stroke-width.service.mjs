import { Inject, Injectable } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
class RtDefineStrokeWidthService {
    document;
    /** Canvas context used to measure text width. */
    canvasContext;
    constructor(document) {
        this.document = document;
        const canvas = document.createElement('canvas');
        this.canvasContext = canvas.getContext('2d');
    }
    /**
     * Returns stroke width for the provided text with specified CSS rule.
     */
    getTextWidth(stroke, font) {
        this.canvasContext.font = font;
        const metrics = this.canvasContext.measureText(stroke);
        return metrics.width;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: RtDefineStrokeWidthService, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: RtDefineStrokeWidthService });
}
export { RtDefineStrokeWidthService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: RtDefineStrokeWidthService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnQtZGVmaW5lLXN0cm9rZS13aWR0aC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvcnQtZGVmaW5lLXN0cm9rZS13aWR0aC9zcmMvbGliL3J0LWRlZmluZS1zdHJva2Utd2lkdGguc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7O0FBR3pDLE1BQ2EsMEJBQTBCO0lBSUM7SUFIdEMsaURBQWlEO0lBQ3ZDLGFBQWEsQ0FBMkI7SUFFbEQsWUFBc0MsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUN0RCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxZQUFZLENBQUMsTUFBYyxFQUFFLElBQWE7UUFDL0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQy9CLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN2QixDQUFDO3VHQWhCVSwwQkFBMEIsa0JBSWpCLFFBQVE7MkdBSmpCLDBCQUEwQjs7U0FBMUIsMEJBQTBCOzJGQUExQiwwQkFBMEI7a0JBRHRDLFVBQVU7OzBCQUtJLE1BQU07MkJBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RE9DVU1FTlR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0NTU0ZvbnR9IGZyb20gJy4vc3ltYm9scyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSdERlZmluZVN0cm9rZVdpZHRoU2VydmljZSB7XG4gIC8qKiBDYW52YXMgY29udGV4dCB1c2VkIHRvIG1lYXN1cmUgdGV4dCB3aWR0aC4gKi9cbiAgcHJvdGVjdGVkIGNhbnZhc0NvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBEb2N1bWVudCkge1xuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIHRoaXMuY2FudmFzQ29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgc3Ryb2tlIHdpZHRoIGZvciB0aGUgcHJvdmlkZWQgdGV4dCB3aXRoIHNwZWNpZmllZCBDU1MgcnVsZS5cbiAgICovXG4gIHB1YmxpYyBnZXRUZXh0V2lkdGgoc3Ryb2tlOiBzdHJpbmcsIGZvbnQ6IENTU0ZvbnQpOiBudW1iZXIge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5mb250ID0gZm9udDtcbiAgICBjb25zdCBtZXRyaWNzID0gdGhpcy5jYW52YXNDb250ZXh0Lm1lYXN1cmVUZXh0KHN0cm9rZSk7XG4gICAgcmV0dXJuIG1ldHJpY3Mud2lkdGg7XG4gIH1cbn1cbiJdfQ==