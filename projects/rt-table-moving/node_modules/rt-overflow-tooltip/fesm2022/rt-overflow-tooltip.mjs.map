{"version":3,"file":"rt-overflow-tooltip.mjs","sources":["../../../projects/rt-overflow-tooltip/src/lib/rt-overflow-tooltip.directive.ts","../../../projects/rt-overflow-tooltip/src/lib/rt-overflow-tooltip.module.ts","../../../projects/rt-overflow-tooltip/src/public-api.ts","../../../projects/rt-overflow-tooltip/src/rt-overflow-tooltip.ts"],"sourcesContent":["import {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, ScrollDispatcher} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MAT_TOOLTIP_SCROLL_STRATEGY,\n  MatTooltip,\n  MatTooltipDefaultOptions,\n} from '@angular/material/tooltip';\nimport {CSSFont, RtDefineStrokeWidthService} from 'rt-define-stroke-width';\nimport {WINDOW} from 'rt-platform';\nimport {Observable, Subscription} from 'rxjs';\n\n@Directive({\n  selector: '[rtOverflowTooltip]',\n})\nexport class RtOverflowTooltipDirective extends MatTooltip implements OnInit, OnDestroy {\n  /** The message to be displayed in the tooltip if the element has not enough space. */\n  @Input() rtOverflowTooltip: string;\n  /** Host element of the directive. */\n  protected hostElement: HTMLElement;\n  /** Text content of the host element. */\n  protected hostElementText: string;\n  /** CSS rules applied to the host element. */\n  protected computedStyle: CSSStyleDeclaration;\n  /** Font CSS style rule applied to the host element. */\n  protected fontString: CSSFont;\n  /** Letter spacing CSS style rule applied to the host element. */\n  protected letterSpacing: string;\n  /** Component subscriptions. Will be unsubscribed on destroy. */\n  private readonly subscription = new Subscription();\n  /** Global window object. */\n  private window: Window;\n\n  constructor(\n    _overlay: Overlay,\n    _elementRef: ElementRef,\n    _scrollDispatcher: ScrollDispatcher,\n    _viewContainerRef: ViewContainerRef,\n    _ngZone: NgZone,\n    _platform: Platform,\n    _ariaDescriber: AriaDescriber,\n    _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) _scrollStrategy: unknown,\n    @Optional() _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(DOCUMENT) _document: Document,\n    private rtDefineStrokeWidth: RtDefineStrokeWidthService,\n    @Optional() @Inject(WINDOW) _window: Window,\n  ) {\n    super(\n      _overlay,\n      _elementRef,\n      _scrollDispatcher,\n      _viewContainerRef,\n      _ngZone,\n      _platform,\n      _ariaDescriber,\n      _focusMonitor,\n      _scrollStrategy,\n      _dir,\n      _defaultOptions,\n      _document,\n    );\n    // Assign host element.\n    this.hostElement = _elementRef.nativeElement;\n\n    // Assign global window object.\n    this.window = _window;\n  }\n\n  ngOnInit(): void {\n\n    // Apply provided tooltip text to the element.\n    this.message = this.rtOverflowTooltip;\n\n    // Subscribe to resize event on the host element and update tooltip display logic.\n    this.subscription.add(\n      this.observeHostElementResize().subscribe(() => this.updateElementDisplayLogic()),\n    );\n  }\n\n  public updateElementDisplayLogic(): void {\n    this.updateElementProperties();\n\n    // Calculate the width of the spaces with the applied letter spacing rule.\n    const letterSpacingAmendment = this.hostElement.innerText.length * parseFloat(this.letterSpacing);\n\n    // Calculate the width of the text content with the applied font rule without actual rendering it.\n    const calculatedStringWidth = this.rtDefineStrokeWidth.getTextWidth(this.hostElement.innerText, this.fontString);\n    const calculatedContentWidth = calculatedStringWidth + letterSpacingAmendment;\n\n    // Calculate the actual width of the host element.\n    const actualContentWidth = this.hostElement.getBoundingClientRect().width - 15;\n\n    // Disable tooltip if the text content is not overflowing (all the content is on the page, so no need to show tooltip).\n    this.disabled = calculatedContentWidth <= actualContentWidth;\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Observe resize event on the provided element.\n   */\n  protected observeHostElementResize(): Observable<ResizeObserverEntry[]> {\n    return new Observable(subscriber => {\n      const resizeObserver = new ResizeObserver(entries => {\n        subscriber.next(entries);\n      });\n\n      resizeObserver.observe(this.hostElement);\n      return () => {\n        resizeObserver.unobserve(this.hostElement);\n      };\n    });\n  }\n\n  /**\n   * Update local variables with the current state of the host element.\n   */\n  protected updateElementProperties(): void {\n    this.hostElementText = this.hostElement.innerText;\n    this.computedStyle = this.window.getComputedStyle(this.hostElement);\n    this.fontString = this.computedStyle.getPropertyValue('font');\n    this.letterSpacing = this.computedStyle.getPropertyValue('letter-spacing');\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {RtDefineStrokeWidthModule} from 'rt-define-stroke-width';\nimport {RtOverflowTooltipDirective} from './rt-overflow-tooltip.directive';\n\n@NgModule({\n  declarations: [RtOverflowTooltipDirective],\n  imports: [RtDefineStrokeWidthModule, MatTooltipModule],\n  exports: [RtOverflowTooltipDirective],\n})\nexport class RtOverflowTooltipModule {}\n","/*\n * Public API Surface of rt-overflow-tooltip\n */\n\n\nexport * from './lib/rt-overflow-tooltip.module';\nexport * from './lib/rt-overflow-tooltip.directive';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}