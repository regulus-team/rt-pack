import { AriaDescriber, FocusMonitor } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import { Overlay, ScrollDispatcher } from '@angular/cdk/overlay';
import { Platform } from '@angular/cdk/platform';
import { ElementRef, NgZone, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';
import { MatTooltip, MatTooltipDefaultOptions } from '@angular/material/tooltip';
import { CSSFont, RtDefineStrokeWidthService } from 'rt-define-stroke-width';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class RtOverflowTooltipDirective extends MatTooltip implements OnInit, OnDestroy {
    private rtDefineStrokeWidth;
    /** The message to be displayed in the tooltip if the element has not enough space. */
    rtOverflowTooltip: string;
    rtOverflowDisable: boolean;
    /** Host element of the directive. */
    protected hostElement: HTMLElement;
    /** Text content of the host element. */
    protected hostElementText: string;
    /** CSS rules applied to the host element. */
    protected computedStyle: CSSStyleDeclaration;
    /** Font CSS style rule applied to the host element. */
    protected fontString: CSSFont;
    /** Letter spacing CSS style rule applied to the host element. */
    protected letterSpacing: string;
    protected paddingLeft: string;
    protected paddingRight: string;
    protected borderLeft: string;
    protected borderRight: string;
    /** Component subscriptions. Will be unsubscribed on destroy. */
    private readonly subscription;
    /** Global window object. */
    private window;
    constructor(_overlay: Overlay, _elementRef: ElementRef, _scrollDispatcher: ScrollDispatcher, _viewContainerRef: ViewContainerRef, _ngZone: NgZone, _platform: Platform, _ariaDescriber: AriaDescriber, _focusMonitor: FocusMonitor, _scrollStrategy: unknown, _dir: Directionality, _defaultOptions: MatTooltipDefaultOptions, _document: Document, rtDefineStrokeWidth: RtDefineStrokeWidthService, _window: Window);
    ngOnInit(): void;
    updateElementDisplayLogic(): void;
    ngOnDestroy(): void;
    /**
     * Observe resize event on the provided element.
     */
    protected observeHostElementResize(): Observable<ResizeObserverEntry[]>;
    /**
     * Update local variables with the current state of the host element.
     */
    protected updateElementProperties(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RtOverflowTooltipDirective, [null, null, null, null, null, null, null, null, null, { optional: true; }, { optional: true; }, { optional: true; }, null, { optional: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RtOverflowTooltipDirective, "[rtOverflowTooltip]", never, { "rtOverflowTooltip": { "alias": "rtOverflowTooltip"; "required": false; }; "rtOverflowDisable": { "alias": "rtOverflowDisable"; "required": false; }; }, {}, never, never, false, never>;
}
