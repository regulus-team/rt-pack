import * as i0 from '@angular/core';
import { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, NgModule } from '@angular/core';
import { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';
import * as i2 from '@angular/platform-browser';

function factoryFn(windowService) {
    return windowService.nativeWindow;
}
const RtPlatformConfigToken = new InjectionToken('RtPlatformConfig');
const defaultConfig = {
    localBaseUrl: null,
    serverBaseUrl: null,
};

class RtPlatformService {
    platformId;
    config;
    constructor(platformId, injectedConfig) {
        this.platformId = platformId;
        /** merge with default config & save in local variable (so it will be never undefined) */
        this.config = Object.assign(defaultConfig, injectedConfig);
    }
    get baseUrl() {
        /** local base url should have higher priority, as build may be run on a local machine */
        if (this.config.localBaseUrl) {
            return this.config.localBaseUrl;
        }
        if (this.config.serverBaseUrl) {
            return this.config.serverBaseUrl;
        }
        return '';
    }
    get isBrowser() {
        return isPlatformBrowser(this.platformId);
    }
    get isServer() {
        return isPlatformServer(this.platformId);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: RtPlatformService, deps: [{ token: PLATFORM_ID }, { token: RtPlatformConfigToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: RtPlatformService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: RtPlatformService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [RtPlatformConfigToken]
                }] }]; } });

class RtTransferStateService {
    platform;
    transfer;
    constructor(platform, transfer) {
        this.platform = platform;
        this.transfer = transfer;
    }
    getKey(name) {
        return `state-${name}`;
    }
    setState(name, state) {
        const key = this.getKey(name);
        this.transfer.set(key, state);
    }
    getState(name) {
        const key = this.getKey(name);
        return this.transfer.get(key, null);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: RtTransferStateService, deps: [{ token: RtPlatformService }, { token: i2.TransferState }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: RtTransferStateService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: RtTransferStateService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: RtPlatformService }, { type: i2.TransferState }]; } });

class WindowService {
    platformId;
    injector;
    _window;
    constructor(platformId, injector) {
        this.platformId = platformId;
        this.injector = injector;
        if (!isPlatformBrowser(platformId)) {
            this._window = { navigator: { userAgent: 'fakeAgent' } };
        }
        else {
            this._window = window;
        }
    }
    get nativeWindow() {
        return this._window;
    }
    calculateHeight() {
        if (isPlatformBrowser(this.platformId)) {
            const appHeight = () => {
                const doc = document.documentElement;
                doc.style.setProperty(`--app-height`, `${window.innerHeight}px`);
            };
            window.addEventListener(`resize`, appHeight);
            appHeight();
            return window.innerHeight;
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: WindowService, deps: [{ token: PLATFORM_ID }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: WindowService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: WindowService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i0.Injector }]; } });
const WINDOW = new InjectionToken('ng-toolkit-window');

class RtPlatformModule {
    static forRoot(config) {
        return {
            ngModule: RtPlatformModule,
            providers: [
                RtPlatformService,
                WindowService,
                {
                    provide: WINDOW,
                    useFactory: factoryFn,
                    deps: [WindowService],
                },
                {
                    provide: RtPlatformConfigToken,
                    useValue: config,
                },
            ],
        };
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: RtPlatformModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.2", ngImport: i0, type: RtPlatformModule, imports: [CommonModule] });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: RtPlatformModule, providers: [RtPlatformService, WindowService, { provide: WINDOW, useFactory: factoryFn, deps: [WindowService] }], imports: [CommonModule] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: RtPlatformModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [CommonModule],
                    providers: [RtPlatformService, WindowService, { provide: WINDOW, useFactory: factoryFn, deps: [WindowService] }],
                }]
        }] });

/*
 * Public API Surface of rt-platform
 */

/**
 * Generated bundle index. Do not edit.
 */

export { RtPlatformConfigToken, RtPlatformModule, RtPlatformService, RtTransferStateService, WINDOW, WindowService, defaultConfig, factoryFn };
//# sourceMappingURL=rt-platform.mjs.map
