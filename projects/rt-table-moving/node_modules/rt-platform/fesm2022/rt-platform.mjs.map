{"version":3,"file":"rt-platform.mjs","sources":["../../../projects/rt-platform/src/lib/symbols.ts","../../../projects/rt-platform/src/lib/rt-platform.service.ts","../../../projects/rt-platform/src/lib/rt-transfer-state.service.ts","../../../projects/rt-platform/src/lib/window.service.ts","../../../projects/rt-platform/src/lib/rt-platform.module.ts","../../../projects/rt-platform/src/public-api.ts","../../../projects/rt-platform/src/rt-platform.ts"],"sourcesContent":["import {InjectionToken} from '@angular/core';\nimport {WindowService} from './window.service';\n\n\nexport interface RtPlatformConfig {\n  /** usually saved in settings */\n  localBaseUrl?: string;\n  /** have lower priority, as build may be run on a local machine */\n  serverBaseUrl?: string;\n}\n\nexport function factoryFn(windowService: WindowService): Window {\n  return windowService.nativeWindow;\n}\n\nexport const RtPlatformConfigToken = new InjectionToken<RtPlatformConfig>('RtPlatformConfig');\n\nexport const defaultConfig: RtPlatformConfig = {\n  localBaseUrl: null,\n  serverBaseUrl: null,\n};\n","import {isPlatformBrowser, isPlatformServer} from '@angular/common';\nimport {Inject, Injectable, Optional, PLATFORM_ID} from '@angular/core';\nimport {defaultConfig, RtPlatformConfig, RtPlatformConfigToken} from './symbols';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RtPlatformService {\n\n  private readonly config: RtPlatformConfig;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    @Optional() @Inject(RtPlatformConfigToken) injectedConfig: RtPlatformConfig,\n  ) {\n    /** merge with default config & save in local variable (so it will be never undefined) */\n    this.config = Object.assign(defaultConfig, injectedConfig);\n  }\n\n  get baseUrl(): string {\n    /** local base url should have higher priority, as build may be run on a local machine */\n    if (this.config.localBaseUrl) {\n      return this.config.localBaseUrl;\n    }\n    if (this.config.serverBaseUrl) {\n      return this.config.serverBaseUrl;\n    }\n    return '';\n  }\n\n  get isBrowser(): boolean {\n    return isPlatformBrowser(this.platformId);\n  }\n\n  get isServer(): boolean {\n    return isPlatformServer(this.platformId);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {RtPlatformService} from './rt-platform.service';\nimport {StateKey, TransferState} from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RtTransferStateService {\n  constructor(private platform: RtPlatformService, private transfer: TransferState) {}\n\n  private getKey(name: string): StateKey<string> {\n    return `state-${name}` as StateKey<string>;\n  }\n\n  private setState(name: string, state: string): void {\n    const key = this.getKey(name);\n    this.transfer.set<string>(key, state);\n  }\n\n  private getState(name: string): string {\n    const key = this.getKey(name);\n    return this.transfer.get<string>(key, null);\n  }\n}\n","import {isPlatformBrowser} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, Injector, PLATFORM_ID} from '@angular/core';\n\n@Injectable()\nexport class WindowService {\n  private readonly _window: Window;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: string, private injector: Injector) {\n    if (!isPlatformBrowser(platformId)) {\n      this._window = {navigator: {userAgent: 'fakeAgent'}} as Window;\n    } else {\n      this._window = window;\n    }\n  }\n\n  get nativeWindow(): Window {\n    return this._window;\n  }\n\n  calculateHeight(): number {\n    if (isPlatformBrowser(this.platformId)) {\n      const appHeight = () => {\n        const doc = document.documentElement;\n        doc.style.setProperty(`--app-height`, `${window.innerHeight}px`);\n      };\n      window.addEventListener(`resize`, appHeight);\n      appHeight();\n      return window.innerHeight;\n    }\n  }\n}\n\nexport const WINDOW = new InjectionToken('ng-toolkit-window');\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {RtPlatformService} from './rt-platform.service';\nimport {factoryFn, RtPlatformConfig, RtPlatformConfigToken} from './symbols';\nimport {WINDOW, WindowService} from './window.service';\n\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule],\n  providers: [RtPlatformService, WindowService, {provide: WINDOW, useFactory: factoryFn, deps: [WindowService]}],\n})\nexport class RtPlatformModule {\n  static forRoot(config?: RtPlatformConfig): ModuleWithProviders<RtPlatformModule> {\n    return {\n      ngModule: RtPlatformModule,\n      providers: [\n        RtPlatformService,\n        WindowService,\n        {\n          provide: WINDOW,\n          useFactory: factoryFn,\n          deps: [WindowService],\n        },\n        {\n          provide: RtPlatformConfigToken,\n          useValue: config,\n        },\n      ],\n    };\n  }\n}\n\n\n\n","/*\n * Public API Surface of rt-platform\n */\n\nexport * from './lib/rt-transfer-state.service';\nexport * from './lib/rt-platform.service';\nexport * from './lib/rt-platform.module';\nexport * from './lib/window.service';\nexport * from './lib/symbols';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.RtPlatformService"],"mappings":"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"}