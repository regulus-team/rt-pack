import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { Inject, Injectable, Optional, PLATFORM_ID } from '@angular/core';
import { defaultConfig, RtPlatformConfigToken } from './symbols';
import * as i0 from "@angular/core";
class RtPlatformService {
    platformId;
    config;
    constructor(platformId, injectedConfig) {
        this.platformId = platformId;
        /** merge with default config & save in local variable (so it will be never undefined) */
        this.config = Object.assign(defaultConfig, injectedConfig);
    }
    get baseUrl() {
        /** local base url should have higher priority, as build may be run on a local machine */
        if (this.config.localBaseUrl) {
            return this.config.localBaseUrl;
        }
        if (this.config.serverBaseUrl) {
            return this.config.serverBaseUrl;
        }
        return '';
    }
    get isBrowser() {
        return isPlatformBrowser(this.platformId);
    }
    get isServer() {
        return isPlatformServer(this.platformId);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: RtPlatformService, deps: [{ token: PLATFORM_ID }, { token: RtPlatformConfigToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: RtPlatformService, providedIn: 'root' });
}
export { RtPlatformService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: RtPlatformService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [RtPlatformConfigToken]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnQtcGxhdGZvcm0uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3J0LXBsYXRmb3JtL3NyYy9saWIvcnQtcGxhdGZvcm0uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBQyxhQUFhLEVBQW9CLHFCQUFxQixFQUFDLE1BQU0sV0FBVyxDQUFDOztBQUdqRixNQUdhLGlCQUFpQjtJQUtHO0lBSGQsTUFBTSxDQUFtQjtJQUUxQyxZQUMrQixVQUFlLEVBQ0QsY0FBZ0M7UUFEOUMsZUFBVSxHQUFWLFVBQVUsQ0FBSztRQUc1Qyx5RkFBeUY7UUFDekYsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1QseUZBQXlGO1FBQ3pGLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztTQUNqQztRQUNELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDN0IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztTQUNsQztRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVELElBQUksU0FBUztRQUNYLE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMzQyxDQUFDO3VHQTdCVSxpQkFBaUIsa0JBS2xCLFdBQVcsYUFDQyxxQkFBcUI7MkdBTmhDLGlCQUFpQixjQUZoQixNQUFNOztTQUVQLGlCQUFpQjsyRkFBakIsaUJBQWlCO2tCQUg3QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7MEJBTUksTUFBTTsyQkFBQyxXQUFXOzswQkFDbEIsUUFBUTs7MEJBQUksTUFBTTsyQkFBQyxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzUGxhdGZvcm1Ccm93c2VyLCBpc1BsYXRmb3JtU2VydmVyfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsLCBQTEFURk9STV9JRH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2RlZmF1bHRDb25maWcsIFJ0UGxhdGZvcm1Db25maWcsIFJ0UGxhdGZvcm1Db25maWdUb2tlbn0gZnJvbSAnLi9zeW1ib2xzJztcblxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgUnRQbGF0Zm9ybVNlcnZpY2Uge1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnOiBSdFBsYXRmb3JtQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogYW55LFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoUnRQbGF0Zm9ybUNvbmZpZ1Rva2VuKSBpbmplY3RlZENvbmZpZzogUnRQbGF0Zm9ybUNvbmZpZyxcbiAgKSB7XG4gICAgLyoqIG1lcmdlIHdpdGggZGVmYXVsdCBjb25maWcgJiBzYXZlIGluIGxvY2FsIHZhcmlhYmxlIChzbyBpdCB3aWxsIGJlIG5ldmVyIHVuZGVmaW5lZCkgKi9cbiAgICB0aGlzLmNvbmZpZyA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdENvbmZpZywgaW5qZWN0ZWRDb25maWcpO1xuICB9XG5cbiAgZ2V0IGJhc2VVcmwoKTogc3RyaW5nIHtcbiAgICAvKiogbG9jYWwgYmFzZSB1cmwgc2hvdWxkIGhhdmUgaGlnaGVyIHByaW9yaXR5LCBhcyBidWlsZCBtYXkgYmUgcnVuIG9uIGEgbG9jYWwgbWFjaGluZSAqL1xuICAgIGlmICh0aGlzLmNvbmZpZy5sb2NhbEJhc2VVcmwpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5sb2NhbEJhc2VVcmw7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbmZpZy5zZXJ2ZXJCYXNlVXJsKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb25maWcuc2VydmVyQmFzZVVybDtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgZ2V0IGlzQnJvd3NlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKTtcbiAgfVxuXG4gIGdldCBpc1NlcnZlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaXNQbGF0Zm9ybVNlcnZlcih0aGlzLnBsYXRmb3JtSWQpO1xuICB9XG59XG4iXX0=