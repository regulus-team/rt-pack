import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { RtPlatformService } from './rt-platform.service';
import { factoryFn, RtPlatformConfigToken } from './symbols';
import { WINDOW, WindowService } from './window.service';
import * as i0 from "@angular/core";
class RtPlatformModule {
    static forRoot(config) {
        return {
            ngModule: RtPlatformModule,
            providers: [
                RtPlatformService,
                WindowService,
                {
                    provide: WINDOW,
                    useFactory: factoryFn,
                    deps: [WindowService],
                },
                {
                    provide: RtPlatformConfigToken,
                    useValue: config,
                },
            ],
        };
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: RtPlatformModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.2", ngImport: i0, type: RtPlatformModule, imports: [CommonModule] });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: RtPlatformModule, providers: [RtPlatformService, WindowService, { provide: WINDOW, useFactory: factoryFn, deps: [WindowService] }], imports: [CommonModule] });
}
export { RtPlatformModule };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: RtPlatformModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [CommonModule],
                    providers: [RtPlatformService, WindowService, { provide: WINDOW, useFactory: factoryFn, deps: [WindowService] }],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnQtcGxhdGZvcm0ubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvcnQtcGxhdGZvcm0vc3JjL2xpYi9ydC1wbGF0Zm9ybS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBc0IsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3hELE9BQU8sRUFBQyxTQUFTLEVBQW9CLHFCQUFxQixFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQzdFLE9BQU8sRUFBQyxNQUFNLEVBQUUsYUFBYSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7O0FBR3ZELE1BS2EsZ0JBQWdCO0lBQzNCLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBeUI7UUFDdEMsT0FBTztZQUNMLFFBQVEsRUFBRSxnQkFBZ0I7WUFDMUIsU0FBUyxFQUFFO2dCQUNULGlCQUFpQjtnQkFDakIsYUFBYTtnQkFDYjtvQkFDRSxPQUFPLEVBQUUsTUFBTTtvQkFDZixVQUFVLEVBQUUsU0FBUztvQkFDckIsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDO2lCQUN0QjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUscUJBQXFCO29CQUM5QixRQUFRLEVBQUUsTUFBTTtpQkFDakI7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDO3VHQWxCVSxnQkFBZ0I7d0dBQWhCLGdCQUFnQixZQUhqQixZQUFZO3dHQUdYLGdCQUFnQixhQUZoQixDQUFDLGlCQUFpQixFQUFFLGFBQWEsRUFBRSxFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBQyxDQUFDLFlBRHBHLFlBQVk7O1NBR1gsZ0JBQWdCOzJGQUFoQixnQkFBZ0I7a0JBTDVCLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLEVBQUU7b0JBQ2hCLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztvQkFDdkIsU0FBUyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsYUFBYSxFQUFFLEVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFDLENBQUM7aUJBQy9HIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21tb25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge01vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UnRQbGF0Zm9ybVNlcnZpY2V9IGZyb20gJy4vcnQtcGxhdGZvcm0uc2VydmljZSc7XG5pbXBvcnQge2ZhY3RvcnlGbiwgUnRQbGF0Zm9ybUNvbmZpZywgUnRQbGF0Zm9ybUNvbmZpZ1Rva2VufSBmcm9tICcuL3N5bWJvbHMnO1xuaW1wb3J0IHtXSU5ET1csIFdpbmRvd1NlcnZpY2V9IGZyb20gJy4vd2luZG93LnNlcnZpY2UnO1xuXG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW10sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICBwcm92aWRlcnM6IFtSdFBsYXRmb3JtU2VydmljZSwgV2luZG93U2VydmljZSwge3Byb3ZpZGU6IFdJTkRPVywgdXNlRmFjdG9yeTogZmFjdG9yeUZuLCBkZXBzOiBbV2luZG93U2VydmljZV19XSxcbn0pXG5leHBvcnQgY2xhc3MgUnRQbGF0Zm9ybU1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KGNvbmZpZz86IFJ0UGxhdGZvcm1Db25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFJ0UGxhdGZvcm1Nb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFJ0UGxhdGZvcm1Nb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgUnRQbGF0Zm9ybVNlcnZpY2UsXG4gICAgICAgIFdpbmRvd1NlcnZpY2UsXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBXSU5ET1csXG4gICAgICAgICAgdXNlRmFjdG9yeTogZmFjdG9yeUZuLFxuICAgICAgICAgIGRlcHM6IFtXaW5kb3dTZXJ2aWNlXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFJ0UGxhdGZvcm1Db25maWdUb2tlbixcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG59XG5cblxuXG4iXX0=