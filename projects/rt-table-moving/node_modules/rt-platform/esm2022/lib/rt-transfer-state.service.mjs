import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./rt-platform.service";
import * as i2 from "@angular/platform-browser";
class RtTransferStateService {
    platform;
    transfer;
    constructor(platform, transfer) {
        this.platform = platform;
        this.transfer = transfer;
    }
    getKey(name) {
        return `state-${name}`;
    }
    setState(name, state) {
        const key = this.getKey(name);
        this.transfer.set(key, state);
    }
    getState(name) {
        const key = this.getKey(name);
        return this.transfer.get(key, null);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: RtTransferStateService, deps: [{ token: i1.RtPlatformService }, { token: i2.TransferState }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: RtTransferStateService, providedIn: 'root' });
}
export { RtTransferStateService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: RtTransferStateService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.RtPlatformService }, { type: i2.TransferState }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnQtdHJhbnNmZXItc3RhdGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3J0LXBsYXRmb3JtL3NyYy9saWIvcnQtdHJhbnNmZXItc3RhdGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDOzs7O0FBSXpDLE1BR2Esc0JBQXNCO0lBQ2I7SUFBcUM7SUFBekQsWUFBb0IsUUFBMkIsRUFBVSxRQUF1QjtRQUE1RCxhQUFRLEdBQVIsUUFBUSxDQUFtQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQWU7SUFBRyxDQUFDO0lBRTVFLE1BQU0sQ0FBQyxJQUFZO1FBQ3pCLE9BQU8sU0FBUyxJQUFJLEVBQXNCLENBQUM7SUFDN0MsQ0FBQztJQUVPLFFBQVEsQ0FBQyxJQUFZLEVBQUUsS0FBYTtRQUMxQyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFTLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRU8sUUFBUSxDQUFDLElBQVk7UUFDM0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFTLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDO3VHQWZVLHNCQUFzQjsyR0FBdEIsc0JBQXNCLGNBRnJCLE1BQU07O1NBRVAsc0JBQXNCOzJGQUF0QixzQkFBc0I7a0JBSGxDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UnRQbGF0Zm9ybVNlcnZpY2V9IGZyb20gJy4vcnQtcGxhdGZvcm0uc2VydmljZSc7XG5pbXBvcnQge1N0YXRlS2V5LCBUcmFuc2ZlclN0YXRlfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFJ0VHJhbnNmZXJTdGF0ZVNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBsYXRmb3JtOiBSdFBsYXRmb3JtU2VydmljZSwgcHJpdmF0ZSB0cmFuc2ZlcjogVHJhbnNmZXJTdGF0ZSkge31cblxuICBwcml2YXRlIGdldEtleShuYW1lOiBzdHJpbmcpOiBTdGF0ZUtleTxzdHJpbmc+IHtcbiAgICByZXR1cm4gYHN0YXRlLSR7bmFtZX1gIGFzIFN0YXRlS2V5PHN0cmluZz47XG4gIH1cblxuICBwcml2YXRlIHNldFN0YXRlKG5hbWU6IHN0cmluZywgc3RhdGU6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGtleSA9IHRoaXMuZ2V0S2V5KG5hbWUpO1xuICAgIHRoaXMudHJhbnNmZXIuc2V0PHN0cmluZz4oa2V5LCBzdGF0ZSk7XG4gIH1cblxuICBwcml2YXRlIGdldFN0YXRlKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5nZXRLZXkobmFtZSk7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmZXIuZ2V0PHN0cmluZz4oa2V5LCBudWxsKTtcbiAgfVxufVxuIl19